USE shop;

-- Практическое задание по теме «Операторы, фильтрация, сортировка и ограничение»

-- 1. Пусть в таблице users поля created_at и updated_at оказались незаполненными. Заполните их текущими датой и временем
TRUNCATE TABLE users;
ALTER TABLE users
MODIFY COLUMN created_at DATETIME DEFAULT NULL,
MODIFY COLUMN updated_at DATETIME DEFAULT NULL;
INSERT INTO users (name, birthday_at) VALUES
  ('Ризо', '2001-08-26'),
  ('Мария', '1999-01-26');
UPDATE users
SET created_at = CURRENT_TIMESTAMP,
	updated_at = CURRENT_TIMESTAMP;
ALTER TABLE users
MODIFY COLUMN created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
MODIFY COLUMN updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP;
    
-- 2. Таблица users была неудачно спроектирована. Записи created_at и updated_at были заданы типом VARCHAR и в них долгое время помещались значения 
-- в формате 20.10.2017 8:10. Необходимо преобразовать поля к типу DATETIME, сохранив введённые ранее значения.
TRUNCATE TABLE users;
ALTER TABLE users 
MODIFY COLUMN created_at VARCHAR(255),
MODIFY COLUMN updated_at VARCHAR(255);
INSERT INTO users (name, birthday_at, created_at, updated_at) VALUES
  ('Ризо', '2001-08-26', '20.10.2017 8:10', '20.10.2018 18:10'),
  ('Мария', '1999-01-26', '20.10.2015 8:10', '20.12.2015 18:10');
UPDATE users 
SET created_at = STR_TO_DATE(created_at, '%d.%m.%Y %k:%i'),
updated_at = STR_TO_DATE(updated_at, '%d.%m.%Y %k:%i');
ALTER TABLE users
MODIFY COLUMN created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
MODIFY COLUMN updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP;

-- 3. В таблице складских запасов storehouses_products в поле value могут встречаться самые разные цифры: 
-- 0, если товар закончился и выше нуля, если на складе имеются запасы. Необходимо отсортировать записи таким образом, 
-- чтобы они выводились в порядке увеличения значения value. Однако нулевые запасы должны выводиться в конце, после всех записей.

TRUNCATE TABLE storehouses_products;
INSERT INTO `storehouses_products` VALUES (1,5,9,8,'1985-04-14 17:08:15','2014-06-06 14:53:09'),(2,8,2,0,'2005-10-22 16:14:13','2019-07-29 14:52:09'),(3,6,9,12,'2002-06-22 17:12:42','1999-08-01 14:41:31'),(4,5,5,143,'1974-08-06 04:14:35','1994-04-14 12:18:53'),(5,6,1,4,'2019-07-03 22:42:52','2003-11-09 23:33:08'),(6,1,6,45,'2007-03-13 20:32:14','2012-08-26 19:18:24'),(7,1,8,0,'2020-11-06 04:20:51','1974-09-18 18:11:41'),(8,4,8,8,'2019-06-06 04:11:35','2015-04-28 08:14:43'),(9,1,6,2,'1992-08-06 14:21:56','1980-10-21 21:55:45'),(10,2,0,0,'1997-12-29 05:23:01','1972-07-15 09:50:20'),(11,9,7,4,'1984-08-10 12:01:51','1991-04-16 21:43:05'),(12,9,5,2,'1970-05-25 05:02:53','1988-11-14 18:43:25'),(13,8,5,97,'2019-07-10 02:34:37','1999-07-14 04:29:44'),(14,6,1,132,'1987-08-13 13:08:22','1974-12-31 17:10:20'),(15,8,6,132,'1984-08-25 00:30:08','2017-06-14 11:44:32'),(16,2,7,45,'1977-07-12 04:23:23','1976-01-23 00:15:07'),(17,6,0,2,'2014-04-24 04:06:58','1989-10-31 07:20:06'),(18,6,0,12,'2002-03-28 19:47:33','2014-09-13 22:42:28'),(19,9,9,2,'1987-04-21 21:37:08','1993-11-27 09:20:55'),(20,0,1,3,'1997-05-30 00:28:59','1979-11-24 04:12:34'),(21,1,1,45,'1994-06-19 22:53:01','1992-09-26 18:48:14'),(22,7,8,3,'1987-09-26 18:01:36','1993-01-19 22:24:59'),(23,1,9,15,'1994-07-21 02:03:44','2001-01-08 22:38:38'),(24,2,2,143,'2021-03-17 15:47:14','1997-04-21 03:59:11'),(25,8,5,45,'1975-09-03 22:46:53','2016-01-02 13:53:37'),(26,5,3,4,'1981-11-01 22:01:37','1974-10-26 09:54:18'),(27,9,0,3,'1990-10-05 11:50:04','2016-11-15 22:31:44'),(28,7,4,6,'2016-01-05 07:30:46','2016-08-12 19:45:42'),(29,6,9,2,'1997-10-22 09:47:06','2022-07-23 12:14:42'),(30,6,7,97,'2018-11-10 05:08:48','1994-12-27 03:38:20'),(31,0,7,132,'1981-06-24 03:02:50','1992-01-24 13:33:19'),(32,8,2,4,'1976-02-06 14:38:42','1983-07-25 00:20:13'),(33,4,4,132,'1980-11-18 18:19:13','1974-01-18 05:50:55'),(34,8,1,132,'2000-03-26 21:36:54','1992-04-21 09:19:08'),(35,8,1,45,'2001-07-27 01:40:17','2004-06-14 14:41:09'),(36,1,8,45,'1972-06-01 07:37:39','1988-03-04 19:47:50'),(37,2,3,3,'1970-11-26 01:01:37','1977-11-29 22:17:35'),(38,3,8,12,'1976-05-11 12:41:42','1993-05-20 21:52:06'),(39,1,0,143,'2012-07-27 22:38:32','1982-06-20 12:54:49'),(40,0,2,132,'2002-08-03 13:51:42','1992-02-26 17:08:13'),(41,0,8,132,'1986-10-05 13:15:44','1980-08-05 11:26:16'),(42,3,6,4,'2003-02-11 19:34:15','1974-11-30 14:58:44'),(43,0,3,3,'1997-05-02 00:44:07','2011-03-08 01:46:59'),(44,6,2,4,'1983-06-10 21:54:11','2005-06-02 04:01:26'),(45,3,9,6,'1998-08-31 09:11:16','1998-12-02 04:26:13'),(46,0,9,6,'2014-07-10 20:35:36','1991-08-23 12:34:32'),(47,3,5,12,'1972-10-25 15:19:52','2008-10-09 22:13:36'),(48,1,3,3,'2009-08-18 06:46:44','2017-04-25 16:51:47'),(49,3,5,143,'2017-04-27 17:27:29','1973-05-27 19:24:06'),(50,7,4,0,'1988-09-13 23:23:00','1996-01-20 02:39:12'),(51,8,8,0,'1989-03-28 10:19:57','1980-07-20 11:54:27'),(52,8,0,2,'2018-03-13 22:13:50','2010-05-31 15:17:22'),(53,4,9,4,'1978-08-15 18:04:55','1997-08-31 15:28:41'),(54,6,4,3,'2013-03-30 01:36:15','2016-06-13 13:12:05'),(55,0,6,4,'1985-10-04 19:06:59','1981-07-28 17:06:18'),(56,6,0,6,'1998-06-19 18:44:45','2020-11-03 02:22:31'),(57,4,6,45,'1979-05-26 09:09:23','1992-11-26 02:25:02'),(58,0,0,132,'1979-09-05 18:47:50','1993-05-18 11:48:32'),(59,3,8,45,'1980-07-01 01:42:01','1973-08-05 07:26:17'),(60,5,0,6,'1980-07-10 07:19:20','1973-06-10 00:25:49'),(61,8,6,45,'2017-07-30 10:22:33','2018-09-25 13:34:29'),(62,5,6,4,'1981-11-03 13:25:04','2011-07-06 01:36:14'),(63,1,6,8,'1998-02-01 19:38:35','2011-01-19 06:27:22'),(64,9,8,97,'2018-11-22 12:38:46','1972-10-11 03:07:10'),(65,9,1,45,'1970-01-04 11:48:18','1974-01-01 11:27:55'),(66,9,4,4,'1988-01-29 14:05:08','2000-08-05 02:57:38'),(67,8,7,12,'1983-04-07 14:12:29','1975-08-04 20:51:15'),(68,7,9,143,'1998-01-29 04:40:26','1984-06-17 17:11:22'),(69,8,5,0,'2006-06-02 06:16:34','1984-02-01 14:37:25'),(70,9,8,45,'2017-06-29 11:25:56','1970-02-17 23:31:20'),(71,3,8,4,'1982-07-10 07:01:15','2010-07-31 19:16:09'),(72,3,5,12,'1975-12-17 20:05:49','1999-08-02 09:51:11'),(73,0,6,132,'1978-03-13 18:53:20','1992-03-01 21:55:27'),(74,5,2,2,'1973-05-28 15:58:03','1977-03-17 01:20:28'),(75,6,9,0,'1986-07-14 21:23:50','1979-08-16 14:02:12'),(76,4,2,132,'2002-08-24 11:10:51','2014-02-12 23:18:55'),(77,0,3,45,'1994-11-18 22:34:56','1986-11-08 05:40:12'),(78,9,1,12,'1991-09-07 02:11:56','2018-03-11 12:13:52'),(79,9,4,15,'1993-07-15 12:52:24','1970-05-07 08:38:41'),(80,4,5,6,'2016-11-24 02:10:33','2001-02-02 05:27:30'),(81,2,2,6,'1975-11-20 07:38:16','2021-08-13 21:51:16'),(82,6,6,45,'1980-06-03 09:43:56','2010-10-07 17:59:51'),(83,9,9,15,'2018-07-21 11:02:55','2021-02-19 10:43:48'),(84,0,9,143,'2004-06-23 16:52:45','1987-11-17 08:28:22'),(85,5,0,4,'1991-07-21 13:25:35','2002-03-15 03:27:44'),(86,3,4,0,'1972-09-01 19:12:50','2000-02-22 21:29:59'),(87,3,1,4,'1972-03-23 05:50:47','1986-10-20 23:34:50'),(88,1,5,4,'1996-05-12 20:00:10','1982-12-31 09:59:30'),(89,8,9,132,'1971-05-15 07:45:46','2020-03-20 00:45:41'),(90,6,1,15,'2004-06-11 22:49:59','1979-05-15 01:51:49'),(91,3,5,4,'1988-03-14 11:25:42','1976-10-01 21:48:45'),(92,8,5,4,'1975-08-20 11:32:17','2020-08-30 07:48:37'),(93,3,7,15,'1987-11-11 02:19:14','1989-10-10 07:15:25'),(94,7,0,12,'2009-07-15 14:06:30','2011-08-06 23:01:31'),(95,4,4,12,'2020-11-19 01:51:42','1977-07-10 14:15:20'),(96,7,9,12,'2019-05-15 04:29:18','1983-06-17 23:52:42'),(97,8,9,0,'1973-01-19 09:53:29','1971-08-28 13:19:54'),(98,6,6,45,'1985-07-25 14:18:42','1977-07-02 01:21:20'),(99,2,9,4,'1971-08-28 18:18:07','1987-10-27 08:38:01'),(100,2,0,2,'2011-12-22 08:06:33','1971-09-01 21:14:31');

SELECT ALL id, value 
FROM storehouses_products 
ORDER BY CASE 
	WHEN value = 0 THEN 1 
    ELSE 0 
END, 
value;

-- 4. (по желанию) Из таблицы users необходимо извлечь пользователей, родившихся в августе и мае. 
-- Месяцы заданы в виде списка английских названий (may, august)

TRUNCATE TABLE users;
INSERT INTO users (name, birthday_at) VALUES
  ('Геннадий', '1990-10-05'),
  ('Наталья', '1984-11-12'),
  ('Александр', '1985-05-20'),
  ('Сергей', '1988-08-14'),
  ('Иван', '1998-08-12');
SELECT name, MONTHNAME(birthday_at) as `Month` FROM users
WHERE MONTHNAME(birthday_at) = 'August';

-- 5. (по желанию) Из таблицы catalogs извлекаются записи при помощи запроса. SELECT * FROM catalogs WHERE id IN (5, 1, 2); 
-- Отсортируйте записи в порядке, заданном в списке IN.

SELECT * FROM catalogs WHERE id IN (5, 1, 2)
ORDER BY CASE 
	WHEN id = 5 THEN 0
    WHEN id = 1 THEN 1
    WHEN id = 2 THEN 2
END;



-- Практическое задание теме «Агрегация данных»
-- 1. Подсчитайте средний возраст пользователей в таблице users.

SELECT TRUNCATE(AVG(timestampdiff(YEAR, birthday_at, curdate())),0) AS year
FROM users;

-- 2. Подсчитайте количество дней рождения, которые приходятся на каждый из дней недели. Следует учесть, что необходимы дни недели текущего года, а не года рождения.
SELECT DAYNAME(CONCAT(YEAR(NOW()),'-', SUBSTRING(birthday_at, 6, 10))) AS day_of_week, COUNT(*) AS birthday
FROM users
GROUP BY day_of_week
ORDER BY birthday DESC;

-- 3. (по желанию) Подсчитайте произведение чисел в столбце таблицы.

DROP TABLE IF EXISTS test;
CREATE TABLE test (
	id SERIAL PRIMARY KEY,
    value INT UNSIGNED
);

INSERT INTO test (value)
VALUES 
	(1), (1), (0), (15), (5), (4);


